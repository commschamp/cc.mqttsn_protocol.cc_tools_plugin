// Generated by commsdsl2tools_qt v7.0.3

#include "Willtopicreq.h"

#include "cc_mqttsn/message/Willtopicreq.h"
#include "cc_tools_qt/ToolsMessageBase.h"
#include "cc_tools_qt_plugin/Message/cc_mqttsn/Message.h"

namespace cc_tools_qt_plugin
{

namespace Message
{

namespace cc_mqttsn
{

namespace message
{

class WilltopicreqImpl : public
    cc_tools_qt::ToolsMessageBase<
        cc_tools_qt_plugin::Message::cc_mqttsn::Message,
        ::cc_mqttsn::message::Willtopicreq,
        WilltopicreqImpl
    >
{
public:
    WilltopicreqImpl() = default;
    WilltopicreqImpl(const WilltopicreqImpl&) = default;
    WilltopicreqImpl(WilltopicreqImpl&&) = default;
    virtual ~WilltopicreqImpl() = default;
    WilltopicreqImpl& operator=(const WilltopicreqImpl&) = default;
    WilltopicreqImpl& operator=(WilltopicreqImpl&&) = default;
};

Willtopicreq::Willtopicreq() : m_pImpl(new WilltopicreqImpl) {}
Willtopicreq::~Willtopicreq() = default;

Willtopicreq& Willtopicreq::operator=(const Willtopicreq& other)
{
    *m_pImpl = *other.m_pImpl;
    return *this;
}

Willtopicreq& Willtopicreq::operator=(Willtopicreq&& other)
{
    *m_pImpl = std::move(*other.m_pImpl);
    return *this;
}

const char* Willtopicreq::nameImpl() const
{
    return m_pImpl->name();
}

bool Willtopicreq::refreshMsgImpl()
{
    return m_pImpl->refreshMsg();
}

qlonglong Willtopicreq::numericIdImpl() const
{
    return m_pImpl->numericId();
}

QString Willtopicreq::idAsStringImpl() const
{
    return m_pImpl->idAsString();
}

void Willtopicreq::resetImpl()
{
    m_pImpl->reset();
}

bool Willtopicreq::assignImpl(const cc_tools_qt::ToolsMessage& other)
{
    auto* castedOther = dynamic_cast<const Willtopicreq*>(&other);
    if (castedOther == nullptr) {
        return false;
    }
    return m_pImpl->assign(*castedOther->m_pImpl);
}

bool Willtopicreq::isValidImpl() const
{
    return m_pImpl->isValid();
}

Willtopicreq::DataSeq Willtopicreq::encodeDataImpl() const
{
    return m_pImpl->encodeData();
}

bool Willtopicreq::decodeDataImpl(const DataSeq& data)
{
    return m_pImpl->decodeData(data);
}

Willtopicreq::Ptr Willtopicreq::cloneImpl() const
{
    ImplPtr impl(static_cast<WilltopicreqImpl*>(m_pImpl->clone().release()));
    return Ptr(new Willtopicreq(std::move(impl)));
}

void Willtopicreq::assignProtMessageImpl(void* protMsg)
{
    m_pImpl->assignProtMessage(protMsg);
}

Willtopicreq::DataSeq Willtopicreq::encodeFramedImpl(cc_tools_qt::ToolsFrame& frame) const
{
    return m_pImpl->encodeFramed(frame);
}

Willtopicreq::FieldsList Willtopicreq::transportFieldsImpl()
{
    return m_pImpl->transportFields();
}

Willtopicreq::FieldsList Willtopicreq::payloadFieldsImpl()
{
    return m_pImpl->payloadFields();
}

Willtopicreq::Willtopicreq(ImplPtr&& impl) :
    m_pImpl(std::move(impl))
{
}

} // namespace message

} // namespace cc_mqttsn

} // namespace Message

} // namespace cc_tools_qt_plugin
