// Generated by commsdsl2tools_qt v7.0.0

#include "Unsuback.h"

#include "cc_mqttsn/message/Unsuback.h"
#include "cc_tools_qt/ToolsMessageBase.h"
#include "cc_tools_qt_plugin/Message/cc_mqttsn/Message.h"

namespace cc_tools_qt_plugin
{

namespace Message
{

namespace cc_mqttsn
{

namespace message
{

class UnsubackImpl : public
    cc_tools_qt::ToolsMessageBase<
        cc_tools_qt_plugin::Message::cc_mqttsn::Message,
        ::cc_mqttsn::message::Unsuback,
        UnsubackImpl
    >
{
public:
    UnsubackImpl() = default;
    UnsubackImpl(const UnsubackImpl&) = default;
    UnsubackImpl(UnsubackImpl&&) = default;
    virtual ~UnsubackImpl() = default;
    UnsubackImpl& operator=(const UnsubackImpl&) = default;
    UnsubackImpl& operator=(UnsubackImpl&&) = default;
};

Unsuback::Unsuback() : m_pImpl(new UnsubackImpl) {}
Unsuback::~Unsuback() = default;

Unsuback& Unsuback::operator=(const Unsuback& other)
{
    *m_pImpl = *other.m_pImpl;
    return *this;
}

Unsuback& Unsuback::operator=(Unsuback&& other)
{
    *m_pImpl = std::move(*other.m_pImpl);
    return *this;
}

const char* Unsuback::nameImpl() const
{
    return m_pImpl->name();
}

bool Unsuback::refreshMsgImpl()
{
    return m_pImpl->refreshMsg();
}

qlonglong Unsuback::numericIdImpl() const
{
    return m_pImpl->numericId();
}

QString Unsuback::idAsStringImpl() const
{
    return m_pImpl->idAsString();
}

void Unsuback::resetImpl()
{
    m_pImpl->reset();
}

bool Unsuback::assignImpl(const cc_tools_qt::ToolsMessage& other)
{
    auto* castedOther = dynamic_cast<const Unsuback*>(&other);
    if (castedOther == nullptr) {
        return false;
    }
    return m_pImpl->assign(*castedOther->m_pImpl);
}

bool Unsuback::isValidImpl() const
{
    return m_pImpl->isValid();
}

Unsuback::DataSeq Unsuback::encodeDataImpl() const
{
    return m_pImpl->encodeData();
}

bool Unsuback::decodeDataImpl(const DataSeq& data)
{
    return m_pImpl->decodeData(data);
}

Unsuback::Ptr Unsuback::cloneImpl() const
{
    ImplPtr impl(static_cast<UnsubackImpl*>(m_pImpl->clone().release()));
    return Ptr(new Unsuback(std::move(impl)));
}

void Unsuback::assignProtMessageImpl(void* protMsg)
{
    m_pImpl->assignProtMessage(protMsg);
}

Unsuback::DataSeq Unsuback::encodeFramedImpl(cc_tools_qt::ToolsFrame& frame) const
{
    return m_pImpl->encodeFramed(frame);
}

Unsuback::FieldsList Unsuback::transportFieldsImpl()
{
    return m_pImpl->transportFields();
}

Unsuback::FieldsList Unsuback::payloadFieldsImpl()
{
    return m_pImpl->payloadFields();
}

Unsuback::Unsuback(ImplPtr&& impl) :
    m_pImpl(std::move(impl))
{
}

} // namespace message

} // namespace cc_mqttsn

} // namespace Message

} // namespace cc_tools_qt_plugin
