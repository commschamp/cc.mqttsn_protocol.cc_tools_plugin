// Generated by commsdsl2tools_qt v7.0.0

#include "Gwinfo.h"

#include "cc_mqttsn/message/Gwinfo.h"
#include "cc_tools_qt/ToolsMessageBase.h"
#include "cc_tools_qt_plugin/Message/cc_mqttsn/Message.h"

namespace cc_tools_qt_plugin
{

namespace Message
{

namespace cc_mqttsn
{

namespace message
{

class GwinfoImpl : public
    cc_tools_qt::ToolsMessageBase<
        cc_tools_qt_plugin::Message::cc_mqttsn::Message,
        ::cc_mqttsn::message::Gwinfo,
        GwinfoImpl
    >
{
public:
    GwinfoImpl() = default;
    GwinfoImpl(const GwinfoImpl&) = default;
    GwinfoImpl(GwinfoImpl&&) = default;
    virtual ~GwinfoImpl() = default;
    GwinfoImpl& operator=(const GwinfoImpl&) = default;
    GwinfoImpl& operator=(GwinfoImpl&&) = default;
};

Gwinfo::Gwinfo() : m_pImpl(new GwinfoImpl) {}
Gwinfo::~Gwinfo() = default;

Gwinfo& Gwinfo::operator=(const Gwinfo& other)
{
    *m_pImpl = *other.m_pImpl;
    return *this;
}

Gwinfo& Gwinfo::operator=(Gwinfo&& other)
{
    *m_pImpl = std::move(*other.m_pImpl);
    return *this;
}

const char* Gwinfo::nameImpl() const
{
    return m_pImpl->name();
}

bool Gwinfo::refreshMsgImpl()
{
    return m_pImpl->refreshMsg();
}

qlonglong Gwinfo::numericIdImpl() const
{
    return m_pImpl->numericId();
}

QString Gwinfo::idAsStringImpl() const
{
    return m_pImpl->idAsString();
}

void Gwinfo::resetImpl()
{
    m_pImpl->reset();
}

bool Gwinfo::assignImpl(const cc_tools_qt::ToolsMessage& other)
{
    auto* castedOther = dynamic_cast<const Gwinfo*>(&other);
    if (castedOther == nullptr) {
        return false;
    }
    return m_pImpl->assign(*castedOther->m_pImpl);
}

bool Gwinfo::isValidImpl() const
{
    return m_pImpl->isValid();
}

Gwinfo::DataSeq Gwinfo::encodeDataImpl() const
{
    return m_pImpl->encodeData();
}

bool Gwinfo::decodeDataImpl(const DataSeq& data)
{
    return m_pImpl->decodeData(data);
}

Gwinfo::Ptr Gwinfo::cloneImpl() const
{
    ImplPtr impl(static_cast<GwinfoImpl*>(m_pImpl->clone().release()));
    return Ptr(new Gwinfo(std::move(impl)));
}

void Gwinfo::assignProtMessageImpl(void* protMsg)
{
    m_pImpl->assignProtMessage(protMsg);
}

Gwinfo::DataSeq Gwinfo::encodeFramedImpl(cc_tools_qt::ToolsFrame& frame) const
{
    return m_pImpl->encodeFramed(frame);
}

Gwinfo::FieldsList Gwinfo::transportFieldsImpl()
{
    return m_pImpl->transportFields();
}

Gwinfo::FieldsList Gwinfo::payloadFieldsImpl()
{
    return m_pImpl->payloadFields();
}

Gwinfo::Gwinfo(ImplPtr&& impl) :
    m_pImpl(std::move(impl))
{
}

} // namespace message

} // namespace cc_mqttsn

} // namespace Message

} // namespace cc_tools_qt_plugin
