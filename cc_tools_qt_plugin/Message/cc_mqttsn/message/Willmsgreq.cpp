// Generated by commsdsl2tools_qt v7.0.3

#include "Willmsgreq.h"

#include "cc_mqttsn/message/Willmsgreq.h"
#include "cc_tools_qt/ToolsMessageBase.h"
#include "cc_tools_qt_plugin/Message/cc_mqttsn/Message.h"

namespace cc_tools_qt_plugin
{

namespace Message
{

namespace cc_mqttsn
{

namespace message
{

class WillmsgreqImpl : public
    cc_tools_qt::ToolsMessageBase<
        cc_tools_qt_plugin::Message::cc_mqttsn::Message,
        ::cc_mqttsn::message::Willmsgreq,
        WillmsgreqImpl
    >
{
public:
    WillmsgreqImpl() = default;
    WillmsgreqImpl(const WillmsgreqImpl&) = default;
    WillmsgreqImpl(WillmsgreqImpl&&) = default;
    virtual ~WillmsgreqImpl() = default;
    WillmsgreqImpl& operator=(const WillmsgreqImpl&) = default;
    WillmsgreqImpl& operator=(WillmsgreqImpl&&) = default;
};

Willmsgreq::Willmsgreq() : m_pImpl(new WillmsgreqImpl) {}
Willmsgreq::~Willmsgreq() = default;

Willmsgreq& Willmsgreq::operator=(const Willmsgreq& other)
{
    *m_pImpl = *other.m_pImpl;
    return *this;
}

Willmsgreq& Willmsgreq::operator=(Willmsgreq&& other)
{
    *m_pImpl = std::move(*other.m_pImpl);
    return *this;
}

const char* Willmsgreq::nameImpl() const
{
    return m_pImpl->name();
}

bool Willmsgreq::refreshMsgImpl()
{
    return m_pImpl->refreshMsg();
}

qlonglong Willmsgreq::numericIdImpl() const
{
    return m_pImpl->numericId();
}

QString Willmsgreq::idAsStringImpl() const
{
    return m_pImpl->idAsString();
}

void Willmsgreq::resetImpl()
{
    m_pImpl->reset();
}

bool Willmsgreq::assignImpl(const cc_tools_qt::ToolsMessage& other)
{
    auto* castedOther = dynamic_cast<const Willmsgreq*>(&other);
    if (castedOther == nullptr) {
        return false;
    }
    return m_pImpl->assign(*castedOther->m_pImpl);
}

bool Willmsgreq::isValidImpl() const
{
    return m_pImpl->isValid();
}

Willmsgreq::DataSeq Willmsgreq::encodeDataImpl() const
{
    return m_pImpl->encodeData();
}

bool Willmsgreq::decodeDataImpl(const DataSeq& data)
{
    return m_pImpl->decodeData(data);
}

Willmsgreq::Ptr Willmsgreq::cloneImpl() const
{
    ImplPtr impl(static_cast<WillmsgreqImpl*>(m_pImpl->clone().release()));
    return Ptr(new Willmsgreq(std::move(impl)));
}

void Willmsgreq::assignProtMessageImpl(void* protMsg)
{
    m_pImpl->assignProtMessage(protMsg);
}

Willmsgreq::DataSeq Willmsgreq::encodeFramedImpl(cc_tools_qt::ToolsFrame& frame) const
{
    return m_pImpl->encodeFramed(frame);
}

Willmsgreq::FieldsList Willmsgreq::transportFieldsImpl()
{
    return m_pImpl->transportFields();
}

Willmsgreq::FieldsList Willmsgreq::payloadFieldsImpl()
{
    return m_pImpl->payloadFields();
}

Willmsgreq::Willmsgreq(ImplPtr&& impl) :
    m_pImpl(std::move(impl))
{
}

} // namespace message

} // namespace cc_mqttsn

} // namespace Message

} // namespace cc_tools_qt_plugin
