// Generated by commsdsl2tools_qt v7.0.3

#include "Register.h"

#include "cc_mqttsn/message/Register.h"
#include "cc_tools_qt/ToolsMessageBase.h"
#include "cc_tools_qt_plugin/Message/cc_mqttsn/Message.h"

namespace cc_tools_qt_plugin
{

namespace Message
{

namespace cc_mqttsn
{

namespace message
{

class RegisterImpl : public
    cc_tools_qt::ToolsMessageBase<
        cc_tools_qt_plugin::Message::cc_mqttsn::Message,
        ::cc_mqttsn::message::Register,
        RegisterImpl
    >
{
public:
    RegisterImpl() = default;
    RegisterImpl(const RegisterImpl&) = default;
    RegisterImpl(RegisterImpl&&) = default;
    virtual ~RegisterImpl() = default;
    RegisterImpl& operator=(const RegisterImpl&) = default;
    RegisterImpl& operator=(RegisterImpl&&) = default;
};

Register::Register() : m_pImpl(new RegisterImpl) {}
Register::~Register() = default;

Register& Register::operator=(const Register& other)
{
    *m_pImpl = *other.m_pImpl;
    return *this;
}

Register& Register::operator=(Register&& other)
{
    *m_pImpl = std::move(*other.m_pImpl);
    return *this;
}

const char* Register::nameImpl() const
{
    return m_pImpl->name();
}

bool Register::refreshMsgImpl()
{
    return m_pImpl->refreshMsg();
}

qlonglong Register::numericIdImpl() const
{
    return m_pImpl->numericId();
}

QString Register::idAsStringImpl() const
{
    return m_pImpl->idAsString();
}

void Register::resetImpl()
{
    m_pImpl->reset();
}

bool Register::assignImpl(const cc_tools_qt::ToolsMessage& other)
{
    auto* castedOther = dynamic_cast<const Register*>(&other);
    if (castedOther == nullptr) {
        return false;
    }
    return m_pImpl->assign(*castedOther->m_pImpl);
}

bool Register::isValidImpl() const
{
    return m_pImpl->isValid();
}

Register::DataSeq Register::encodeDataImpl() const
{
    return m_pImpl->encodeData();
}

bool Register::decodeDataImpl(const DataSeq& data)
{
    return m_pImpl->decodeData(data);
}

Register::Ptr Register::cloneImpl() const
{
    ImplPtr impl(static_cast<RegisterImpl*>(m_pImpl->clone().release()));
    return Ptr(new Register(std::move(impl)));
}

void Register::assignProtMessageImpl(void* protMsg)
{
    m_pImpl->assignProtMessage(protMsg);
}

Register::DataSeq Register::encodeFramedImpl(cc_tools_qt::ToolsFrame& frame) const
{
    return m_pImpl->encodeFramed(frame);
}

Register::FieldsList Register::transportFieldsImpl()
{
    return m_pImpl->transportFields();
}

Register::FieldsList Register::payloadFieldsImpl()
{
    return m_pImpl->payloadFields();
}

Register::Register(ImplPtr&& impl) :
    m_pImpl(std::move(impl))
{
}

} // namespace message

} // namespace cc_mqttsn

} // namespace Message

} // namespace cc_tools_qt_plugin
