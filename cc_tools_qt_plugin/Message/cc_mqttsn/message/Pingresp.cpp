// Generated by commsdsl2tools_qt v7.0.2

#include "Pingresp.h"

#include "cc_mqttsn/message/Pingresp.h"
#include "cc_tools_qt/ToolsMessageBase.h"
#include "cc_tools_qt_plugin/Message/cc_mqttsn/Message.h"

namespace cc_tools_qt_plugin
{

namespace Message
{

namespace cc_mqttsn
{

namespace message
{

class PingrespImpl : public
    cc_tools_qt::ToolsMessageBase<
        cc_tools_qt_plugin::Message::cc_mqttsn::Message,
        ::cc_mqttsn::message::Pingresp,
        PingrespImpl
    >
{
public:
    PingrespImpl() = default;
    PingrespImpl(const PingrespImpl&) = default;
    PingrespImpl(PingrespImpl&&) = default;
    virtual ~PingrespImpl() = default;
    PingrespImpl& operator=(const PingrespImpl&) = default;
    PingrespImpl& operator=(PingrespImpl&&) = default;
};

Pingresp::Pingresp() : m_pImpl(new PingrespImpl) {}
Pingresp::~Pingresp() = default;

Pingresp& Pingresp::operator=(const Pingresp& other)
{
    *m_pImpl = *other.m_pImpl;
    return *this;
}

Pingresp& Pingresp::operator=(Pingresp&& other)
{
    *m_pImpl = std::move(*other.m_pImpl);
    return *this;
}

const char* Pingresp::nameImpl() const
{
    return m_pImpl->name();
}

bool Pingresp::refreshMsgImpl()
{
    return m_pImpl->refreshMsg();
}

qlonglong Pingresp::numericIdImpl() const
{
    return m_pImpl->numericId();
}

QString Pingresp::idAsStringImpl() const
{
    return m_pImpl->idAsString();
}

void Pingresp::resetImpl()
{
    m_pImpl->reset();
}

bool Pingresp::assignImpl(const cc_tools_qt::ToolsMessage& other)
{
    auto* castedOther = dynamic_cast<const Pingresp*>(&other);
    if (castedOther == nullptr) {
        return false;
    }
    return m_pImpl->assign(*castedOther->m_pImpl);
}

bool Pingresp::isValidImpl() const
{
    return m_pImpl->isValid();
}

Pingresp::DataSeq Pingresp::encodeDataImpl() const
{
    return m_pImpl->encodeData();
}

bool Pingresp::decodeDataImpl(const DataSeq& data)
{
    return m_pImpl->decodeData(data);
}

Pingresp::Ptr Pingresp::cloneImpl() const
{
    ImplPtr impl(static_cast<PingrespImpl*>(m_pImpl->clone().release()));
    return Ptr(new Pingresp(std::move(impl)));
}

void Pingresp::assignProtMessageImpl(void* protMsg)
{
    m_pImpl->assignProtMessage(protMsg);
}

Pingresp::DataSeq Pingresp::encodeFramedImpl(cc_tools_qt::ToolsFrame& frame) const
{
    return m_pImpl->encodeFramed(frame);
}

Pingresp::FieldsList Pingresp::transportFieldsImpl()
{
    return m_pImpl->transportFields();
}

Pingresp::FieldsList Pingresp::payloadFieldsImpl()
{
    return m_pImpl->payloadFields();
}

Pingresp::Pingresp(ImplPtr&& impl) :
    m_pImpl(std::move(impl))
{
}

} // namespace message

} // namespace cc_mqttsn

} // namespace Message

} // namespace cc_tools_qt_plugin
