// Generated by commsdsl2tools_qt v7.0.2

#include "Regack.h"

#include "cc_mqttsn/message/Regack.h"
#include "cc_tools_qt/ToolsMessageBase.h"
#include "cc_tools_qt_plugin/Message/cc_mqttsn/Message.h"

namespace cc_tools_qt_plugin
{

namespace Message
{

namespace cc_mqttsn
{

namespace message
{

class RegackImpl : public
    cc_tools_qt::ToolsMessageBase<
        cc_tools_qt_plugin::Message::cc_mqttsn::Message,
        ::cc_mqttsn::message::Regack,
        RegackImpl
    >
{
public:
    RegackImpl() = default;
    RegackImpl(const RegackImpl&) = default;
    RegackImpl(RegackImpl&&) = default;
    virtual ~RegackImpl() = default;
    RegackImpl& operator=(const RegackImpl&) = default;
    RegackImpl& operator=(RegackImpl&&) = default;
};

Regack::Regack() : m_pImpl(new RegackImpl) {}
Regack::~Regack() = default;

Regack& Regack::operator=(const Regack& other)
{
    *m_pImpl = *other.m_pImpl;
    return *this;
}

Regack& Regack::operator=(Regack&& other)
{
    *m_pImpl = std::move(*other.m_pImpl);
    return *this;
}

const char* Regack::nameImpl() const
{
    return m_pImpl->name();
}

bool Regack::refreshMsgImpl()
{
    return m_pImpl->refreshMsg();
}

qlonglong Regack::numericIdImpl() const
{
    return m_pImpl->numericId();
}

QString Regack::idAsStringImpl() const
{
    return m_pImpl->idAsString();
}

void Regack::resetImpl()
{
    m_pImpl->reset();
}

bool Regack::assignImpl(const cc_tools_qt::ToolsMessage& other)
{
    auto* castedOther = dynamic_cast<const Regack*>(&other);
    if (castedOther == nullptr) {
        return false;
    }
    return m_pImpl->assign(*castedOther->m_pImpl);
}

bool Regack::isValidImpl() const
{
    return m_pImpl->isValid();
}

Regack::DataSeq Regack::encodeDataImpl() const
{
    return m_pImpl->encodeData();
}

bool Regack::decodeDataImpl(const DataSeq& data)
{
    return m_pImpl->decodeData(data);
}

Regack::Ptr Regack::cloneImpl() const
{
    ImplPtr impl(static_cast<RegackImpl*>(m_pImpl->clone().release()));
    return Ptr(new Regack(std::move(impl)));
}

void Regack::assignProtMessageImpl(void* protMsg)
{
    m_pImpl->assignProtMessage(protMsg);
}

Regack::DataSeq Regack::encodeFramedImpl(cc_tools_qt::ToolsFrame& frame) const
{
    return m_pImpl->encodeFramed(frame);
}

Regack::FieldsList Regack::transportFieldsImpl()
{
    return m_pImpl->transportFields();
}

Regack::FieldsList Regack::payloadFieldsImpl()
{
    return m_pImpl->payloadFields();
}

Regack::Regack(ImplPtr&& impl) :
    m_pImpl(std::move(impl))
{
}

} // namespace message

} // namespace cc_mqttsn

} // namespace Message

} // namespace cc_tools_qt_plugin
