// Generated by commsdsl2tools_qt v6.3.3

#include "Gwinfo.h"

#include "cc_mqttsn/message/Gwinfo.h"
#include "cc_tools_qt/ProtocolMessageBase.h"
#include "cc_tools_qt/property/field.h"
#include "cc_tools_qt_plugin/cc_mqttsn/field/GwAdd.h"
#include "cc_tools_qt_plugin/cc_mqttsn/field/GwId.h"
#include "cc_tools_qt_plugin/cc_mqttsn/options/DefaultOptions.h"

namespace cc_tools_qt_plugin
{

namespace cc_mqttsn
{

namespace message
{

namespace
{

static QVariantMap createProps_gwId(bool serHidden)
{
    static_cast<void>(serHidden);
    using Field = ::cc_mqttsn::message::GwinfoFields<cc_tools_qt_plugin::cc_mqttsn::options::DefaultOptions>::GwId;
    auto props = cc_tools_qt_plugin::cc_mqttsn::field::createProps_gwId(Field::name(), serHidden);
    return props;
}

static QVariantMap createProps_gwAdd(bool serHidden)
{
    static_cast<void>(serHidden);
    using Field = ::cc_mqttsn::message::GwinfoFields<cc_tools_qt_plugin::cc_mqttsn::options::DefaultOptions>::GwAdd;
    auto props = cc_tools_qt_plugin::cc_mqttsn::field::createProps_gwAdd(Field::name(), serHidden);
    return props;
}

QVariantList createProps()
{
    QVariantList props;
    props.append(createProps_gwId(false));
    props.append(createProps_gwAdd(false));
    return props;
}

} // namespace

class GwinfoImpl : public
    cc_tools_qt::ProtocolMessageBase<
        ::cc_mqttsn::message::Gwinfo<cc_tools_qt_plugin::cc_mqttsn::Message, cc_tools_qt_plugin::cc_mqttsn::options::DefaultOptions>,
        GwinfoImpl
    >
{
public:
    GwinfoImpl() = default;
    GwinfoImpl(const GwinfoImpl&) = delete;
    GwinfoImpl(GwinfoImpl&&) = delete;
    virtual ~GwinfoImpl() = default;
    GwinfoImpl& operator=(const GwinfoImpl&) = default;
    GwinfoImpl& operator=(GwinfoImpl&&) = default;

protected:
    virtual const QVariantList& fieldsPropertiesImpl() const override
    {
        static const QVariantList Props = createProps();
        return Props;
    }
};

Gwinfo::Gwinfo() : m_pImpl(new GwinfoImpl) {}
Gwinfo::~Gwinfo() = default;

Gwinfo& Gwinfo::operator=(const Gwinfo& other)
{
    *m_pImpl = *other.m_pImpl;
    return *this;
}

Gwinfo& Gwinfo::operator=(Gwinfo&& other)
{
    *m_pImpl = std::move(*other.m_pImpl);
    return *this;
}

Gwinfo::MsgIdParamType Gwinfo::doGetId()
{
    return ::cc_mqttsn::message::Gwinfo<cc_tools_qt_plugin::cc_mqttsn::Message, cc_tools_qt_plugin::cc_mqttsn::options::DefaultOptions>::doGetId();
}

const char* Gwinfo::nameImpl() const
{
    return static_cast<const cc_tools_qt::Message*>(m_pImpl.get())->name();
}

const QVariantList& Gwinfo::fieldsPropertiesImpl() const
{
    return m_pImpl->fieldsProperties();
}

void Gwinfo::dispatchImpl(cc_tools_qt::MessageHandler& handler)
{
    static_cast<cc_tools_qt::Message*>(m_pImpl.get())->dispatch(handler);
}

void Gwinfo::resetImpl()
{
    m_pImpl->reset();
}

bool Gwinfo::assignImpl(const cc_tools_qt::Message& other)
{
    auto* castedOther = dynamic_cast<const Gwinfo*>(&other);
    if (castedOther == nullptr) {
        return false;
    }
    return m_pImpl->assign(*castedOther->m_pImpl);
}

Gwinfo::MsgIdParamType Gwinfo::getIdImpl() const
{
    return m_pImpl->getId();
}

comms::ErrorStatus Gwinfo::readImpl(ReadIterator& iter, std::size_t len)
{
    return m_pImpl->read(iter, len);
}

comms::ErrorStatus Gwinfo::writeImpl(WriteIterator& iter, std::size_t len) const
{
    return m_pImpl->write(iter, len);
}

bool Gwinfo::validImpl() const
{
    return m_pImpl->valid();
}

std::size_t Gwinfo::lengthImpl() const
{
    return m_pImpl->length();
}

bool Gwinfo::refreshImpl()
{
    return m_pImpl->refresh();
}

} // namespace message

} // namespace cc_mqttsn

} // namespace cc_tools_qt_plugin
