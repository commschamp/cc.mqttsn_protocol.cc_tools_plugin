// Generated by commsdsl2tools_qt v6.3.4

#include "Willtopicupd.h"

#include "cc_mqttsn/message/Willtopicupd.h"
#include "cc_tools_qt/ProtocolMessageBase.h"
#include "cc_tools_qt/property/field.h"
#include "cc_tools_qt_plugin/cc_mqttsn/field/Flags.h"
#include "cc_tools_qt_plugin/cc_mqttsn/field/WillTopic.h"
#include "cc_tools_qt_plugin/cc_mqttsn/options/DefaultOptions.h"

namespace cc_tools_qt_plugin
{

namespace cc_mqttsn
{

namespace message
{

namespace
{

struct FlagsMembers
{
    static QVariantMap createProps_flagsField(bool serHidden)
    {
        static_cast<void>(serHidden);
        using Field = ::cc_mqttsn::message::WilltopicupdFields<cc_tools_qt_plugin::cc_mqttsn::options::DefaultOptions>::FlagsMembers::FlagsField;
        auto props = cc_tools_qt_plugin::cc_mqttsn::field::createProps_flags(Field::name(), serHidden);
        return props;
    }
}; // struct FlagsMembers

static QVariantMap createProps_flags(bool serHidden)
{
    static_cast<void>(serHidden);
    using Field = ::cc_mqttsn::message::WilltopicupdFields<cc_tools_qt_plugin::cc_mqttsn::options::DefaultOptions>::Flags;
    return
        cc_tools_qt::property::field::ForField<Field>()
            .name(Field::name())
            .serialisedHidden(serHidden)
            .field(FlagsMembers::createProps_flagsField(serHidden))
            .asMap();
}

static QVariantMap createProps_willTopic(bool serHidden)
{
    static_cast<void>(serHidden);
    using Field = ::cc_mqttsn::message::WilltopicupdFields<cc_tools_qt_plugin::cc_mqttsn::options::DefaultOptions>::WillTopic;
    auto props = cc_tools_qt_plugin::cc_mqttsn::field::createProps_willTopic(Field::name(), serHidden);
    return props;
}

QVariantList createProps()
{
    QVariantList props;
    props.append(createProps_flags(false));
    props.append(createProps_willTopic(false));
    return props;
}

} // namespace

class WilltopicupdImpl : public
    cc_tools_qt::ProtocolMessageBase<
        ::cc_mqttsn::message::Willtopicupd<cc_tools_qt_plugin::cc_mqttsn::Message, cc_tools_qt_plugin::cc_mqttsn::options::DefaultOptions>,
        WilltopicupdImpl
    >
{
public:
    WilltopicupdImpl() = default;
    WilltopicupdImpl(const WilltopicupdImpl&) = delete;
    WilltopicupdImpl(WilltopicupdImpl&&) = delete;
    virtual ~WilltopicupdImpl() = default;
    WilltopicupdImpl& operator=(const WilltopicupdImpl&) = default;
    WilltopicupdImpl& operator=(WilltopicupdImpl&&) = default;

protected:
    virtual const QVariantList& fieldsPropertiesImpl() const override
    {
        static const QVariantList Props = createProps();
        return Props;
    }
};

Willtopicupd::Willtopicupd() : m_pImpl(new WilltopicupdImpl) {}
Willtopicupd::~Willtopicupd() = default;

Willtopicupd& Willtopicupd::operator=(const Willtopicupd& other)
{
    *m_pImpl = *other.m_pImpl;
    return *this;
}

Willtopicupd& Willtopicupd::operator=(Willtopicupd&& other)
{
    *m_pImpl = std::move(*other.m_pImpl);
    return *this;
}

Willtopicupd::MsgIdParamType Willtopicupd::doGetId()
{
    return ::cc_mqttsn::message::Willtopicupd<cc_tools_qt_plugin::cc_mqttsn::Message, cc_tools_qt_plugin::cc_mqttsn::options::DefaultOptions>::doGetId();
}

const char* Willtopicupd::nameImpl() const
{
    return static_cast<const cc_tools_qt::Message*>(m_pImpl.get())->name();
}

const QVariantList& Willtopicupd::fieldsPropertiesImpl() const
{
    return m_pImpl->fieldsProperties();
}

void Willtopicupd::dispatchImpl(cc_tools_qt::MessageHandler& handler)
{
    static_cast<cc_tools_qt::Message*>(m_pImpl.get())->dispatch(handler);
}

void Willtopicupd::resetImpl()
{
    m_pImpl->reset();
}

bool Willtopicupd::assignImpl(const cc_tools_qt::Message& other)
{
    auto* castedOther = dynamic_cast<const Willtopicupd*>(&other);
    if (castedOther == nullptr) {
        return false;
    }
    return m_pImpl->assign(*castedOther->m_pImpl);
}

Willtopicupd::MsgIdParamType Willtopicupd::getIdImpl() const
{
    return m_pImpl->getId();
}

comms::ErrorStatus Willtopicupd::readImpl(ReadIterator& iter, std::size_t len)
{
    return m_pImpl->read(iter, len);
}

comms::ErrorStatus Willtopicupd::writeImpl(WriteIterator& iter, std::size_t len) const
{
    return m_pImpl->write(iter, len);
}

bool Willtopicupd::validImpl() const
{
    return m_pImpl->valid();
}

std::size_t Willtopicupd::lengthImpl() const
{
    return m_pImpl->length();
}

bool Willtopicupd::refreshImpl()
{
    return m_pImpl->refresh();
}

} // namespace message

} // namespace cc_mqttsn

} // namespace cc_tools_qt_plugin
