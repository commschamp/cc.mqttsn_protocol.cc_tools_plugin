// Generated by commsdsl2tools_qt v6.3.0

#include "Unsuback.h"

#include "cc_mqttsn/message/Unsuback.h"
#include "cc_tools_qt/ProtocolMessageBase.h"
#include "cc_tools_qt/property/field.h"
#include "cc_tools_qt_plugin/cc_mqttsn/field/MessageId.h"
#include "cc_tools_qt_plugin/cc_mqttsn/options/DefaultOptions.h"

namespace cc_tools_qt_plugin
{

namespace cc_mqttsn
{

namespace message
{

namespace
{

static QVariantMap createProps_msgId(bool serHidden)
{
    static_cast<void>(serHidden);
    using Field = ::cc_mqttsn::message::UnsubackFields<cc_tools_qt_plugin::cc_mqttsn::options::DefaultOptions>::MsgId;
    auto props = cc_tools_qt_plugin::cc_mqttsn::field::createProps_messageId(Field::name(), serHidden);
    return props;
}

QVariantList createProps()
{
    QVariantList props;
    props.append(createProps_msgId(false));
    return props;
}

} // namespace

class UnsubackImpl : public
    cc_tools_qt::ProtocolMessageBase<
        ::cc_mqttsn::message::Unsuback<cc_tools_qt_plugin::cc_mqttsn::Message, cc_tools_qt_plugin::cc_mqttsn::options::DefaultOptions>,
        UnsubackImpl
    >
{
public:
    UnsubackImpl() = default;
    UnsubackImpl(const UnsubackImpl&) = delete;
    UnsubackImpl(UnsubackImpl&&) = delete;
    virtual ~UnsubackImpl() = default;
    UnsubackImpl& operator=(const UnsubackImpl&) = default;
    UnsubackImpl& operator=(UnsubackImpl&&) = default;

protected:
    virtual const QVariantList& fieldsPropertiesImpl() const override
    {
        static const QVariantList Props = createProps();
        return Props;
    }
};

Unsuback::Unsuback() : m_pImpl(new UnsubackImpl) {}
Unsuback::~Unsuback() = default;

Unsuback& Unsuback::operator=(const Unsuback& other)
{
    *m_pImpl = *other.m_pImpl;
    return *this;
}

Unsuback& Unsuback::operator=(Unsuback&& other)
{
    *m_pImpl = std::move(*other.m_pImpl);
    return *this;
}

Unsuback::MsgIdParamType Unsuback::doGetId()
{
    return ::cc_mqttsn::message::Unsuback<cc_tools_qt_plugin::cc_mqttsn::Message, cc_tools_qt_plugin::cc_mqttsn::options::DefaultOptions>::doGetId();
}

const char* Unsuback::nameImpl() const
{
    return static_cast<const cc_tools_qt::Message*>(m_pImpl.get())->name();
}

const QVariantList& Unsuback::fieldsPropertiesImpl() const
{
    return m_pImpl->fieldsProperties();
}

void Unsuback::dispatchImpl(cc_tools_qt::MessageHandler& handler)
{
    static_cast<cc_tools_qt::Message*>(m_pImpl.get())->dispatch(handler);
}

void Unsuback::resetImpl()
{
    m_pImpl->reset();
}

bool Unsuback::assignImpl(const cc_tools_qt::Message& other)
{
    auto* castedOther = dynamic_cast<const Unsuback*>(&other);
    if (castedOther == nullptr) {
        return false;
    }
    return m_pImpl->assign(*castedOther->m_pImpl);
}

Unsuback::MsgIdParamType Unsuback::getIdImpl() const
{
    return m_pImpl->getId();
}

comms::ErrorStatus Unsuback::readImpl(ReadIterator& iter, std::size_t len)
{
    return m_pImpl->read(iter, len);
}

comms::ErrorStatus Unsuback::writeImpl(WriteIterator& iter, std::size_t len) const
{
    return m_pImpl->write(iter, len);
}

bool Unsuback::validImpl() const
{
    return m_pImpl->valid();
}

std::size_t Unsuback::lengthImpl() const
{
    return m_pImpl->length();
}

bool Unsuback::refreshImpl()
{
    return m_pImpl->refresh();
}

} // namespace message

} // namespace cc_mqttsn

} // namespace cc_tools_qt_plugin
