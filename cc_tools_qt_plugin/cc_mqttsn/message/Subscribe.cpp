// Generated by commsdsl2tools_qt v6.3.4

#include "Subscribe.h"

#include "cc_mqttsn/message/Subscribe.h"
#include "cc_tools_qt/ProtocolMessageBase.h"
#include "cc_tools_qt/property/field.h"
#include "cc_tools_qt_plugin/cc_mqttsn/field/Flags.h"
#include "cc_tools_qt_plugin/cc_mqttsn/field/MessageId.h"
#include "cc_tools_qt_plugin/cc_mqttsn/field/TopicId.h"
#include "cc_tools_qt_plugin/cc_mqttsn/field/TopicName.h"
#include "cc_tools_qt_plugin/cc_mqttsn/options/DefaultOptions.h"

namespace cc_tools_qt_plugin
{

namespace cc_mqttsn
{

namespace message
{

namespace
{

static QVariantMap createProps_flags(bool serHidden)
{
    static_cast<void>(serHidden);
    using Field = ::cc_mqttsn::message::SubscribeFields<cc_tools_qt_plugin::cc_mqttsn::options::DefaultOptions>::Flags;
    auto props = cc_tools_qt_plugin::cc_mqttsn::field::createProps_flags(Field::name(), serHidden);
    return props;
}

static QVariantMap createProps_msgId(bool serHidden)
{
    static_cast<void>(serHidden);
    using Field = ::cc_mqttsn::message::SubscribeFields<cc_tools_qt_plugin::cc_mqttsn::options::DefaultOptions>::MsgId;
    auto props = cc_tools_qt_plugin::cc_mqttsn::field::createProps_messageId(Field::name(), serHidden);
    return props;
}

struct TopicIdMembers
{
    static QVariantMap createProps_topicId(bool serHidden)
    {
        static_cast<void>(serHidden);
        using Field = ::cc_mqttsn::message::SubscribeFields<cc_tools_qt_plugin::cc_mqttsn::options::DefaultOptions>::TopicIdMembers::TopicId;
        auto props = cc_tools_qt_plugin::cc_mqttsn::field::createProps_topicId(Field::name(), serHidden);
        return props;
    }
}; // struct TopicIdMembers

static QVariantMap createProps_topicId(bool serHidden)
{
    static_cast<void>(serHidden);
    using Field = ::cc_mqttsn::message::SubscribeFields<cc_tools_qt_plugin::cc_mqttsn::options::DefaultOptions>::TopicId;
    return
        cc_tools_qt::property::field::ForField<Field>()
            .name(Field::name())
            .serialisedHidden(serHidden)
            .uncheckable()
            .field(TopicIdMembers::createProps_topicId(serHidden))
            .asMap();
}

struct TopicNameMembers
{
    static QVariantMap createProps_topicName(bool serHidden)
    {
        static_cast<void>(serHidden);
        using Field = ::cc_mqttsn::message::SubscribeFields<cc_tools_qt_plugin::cc_mqttsn::options::DefaultOptions>::TopicNameMembers::TopicName;
        auto props = cc_tools_qt_plugin::cc_mqttsn::field::createProps_topicName(Field::name(), serHidden);
        return props;
    }
}; // struct TopicNameMembers

static QVariantMap createProps_topicName(bool serHidden)
{
    static_cast<void>(serHidden);
    using Field = ::cc_mqttsn::message::SubscribeFields<cc_tools_qt_plugin::cc_mqttsn::options::DefaultOptions>::TopicName;
    return
        cc_tools_qt::property::field::ForField<Field>()
            .name(Field::name())
            .serialisedHidden(serHidden)
            .uncheckable()
            .field(TopicNameMembers::createProps_topicName(serHidden))
            .asMap();
}

QVariantList createProps()
{
    QVariantList props;
    props.append(createProps_flags(false));
    props.append(createProps_msgId(false));
    props.append(createProps_topicId(false));
    props.append(createProps_topicName(false));
    return props;
}

} // namespace

class SubscribeImpl : public
    cc_tools_qt::ProtocolMessageBase<
        ::cc_mqttsn::message::Subscribe<cc_tools_qt_plugin::cc_mqttsn::Message, cc_tools_qt_plugin::cc_mqttsn::options::DefaultOptions>,
        SubscribeImpl
    >
{
public:
    SubscribeImpl() = default;
    SubscribeImpl(const SubscribeImpl&) = delete;
    SubscribeImpl(SubscribeImpl&&) = delete;
    virtual ~SubscribeImpl() = default;
    SubscribeImpl& operator=(const SubscribeImpl&) = default;
    SubscribeImpl& operator=(SubscribeImpl&&) = default;

protected:
    virtual const QVariantList& fieldsPropertiesImpl() const override
    {
        static const QVariantList Props = createProps();
        return Props;
    }
};

Subscribe::Subscribe() : m_pImpl(new SubscribeImpl) {}
Subscribe::~Subscribe() = default;

Subscribe& Subscribe::operator=(const Subscribe& other)
{
    *m_pImpl = *other.m_pImpl;
    return *this;
}

Subscribe& Subscribe::operator=(Subscribe&& other)
{
    *m_pImpl = std::move(*other.m_pImpl);
    return *this;
}

Subscribe::MsgIdParamType Subscribe::doGetId()
{
    return ::cc_mqttsn::message::Subscribe<cc_tools_qt_plugin::cc_mqttsn::Message, cc_tools_qt_plugin::cc_mqttsn::options::DefaultOptions>::doGetId();
}

const char* Subscribe::nameImpl() const
{
    return static_cast<const cc_tools_qt::Message*>(m_pImpl.get())->name();
}

const QVariantList& Subscribe::fieldsPropertiesImpl() const
{
    return m_pImpl->fieldsProperties();
}

void Subscribe::dispatchImpl(cc_tools_qt::MessageHandler& handler)
{
    static_cast<cc_tools_qt::Message*>(m_pImpl.get())->dispatch(handler);
}

void Subscribe::resetImpl()
{
    m_pImpl->reset();
}

bool Subscribe::assignImpl(const cc_tools_qt::Message& other)
{
    auto* castedOther = dynamic_cast<const Subscribe*>(&other);
    if (castedOther == nullptr) {
        return false;
    }
    return m_pImpl->assign(*castedOther->m_pImpl);
}

Subscribe::MsgIdParamType Subscribe::getIdImpl() const
{
    return m_pImpl->getId();
}

comms::ErrorStatus Subscribe::readImpl(ReadIterator& iter, std::size_t len)
{
    return m_pImpl->read(iter, len);
}

comms::ErrorStatus Subscribe::writeImpl(WriteIterator& iter, std::size_t len) const
{
    return m_pImpl->write(iter, len);
}

bool Subscribe::validImpl() const
{
    return m_pImpl->valid();
}

std::size_t Subscribe::lengthImpl() const
{
    return m_pImpl->length();
}

bool Subscribe::refreshImpl()
{
    return m_pImpl->refresh();
}

} // namespace message

} // namespace cc_mqttsn

} // namespace cc_tools_qt_plugin
