// Generated by commsdsl2tools_qt v6.3.4

#include "Flags.h"

#include "cc_mqttsn/field/Flags.h"
#include "cc_tools_qt/property/field.h"
#include "cc_tools_qt_plugin/cc_mqttsn/field/Qos.h"
#include "cc_tools_qt_plugin/cc_mqttsn/field/TopicIdType.h"
#include "cc_tools_qt_plugin/cc_mqttsn/options/DefaultOptions.h"

namespace cc_tools_qt_plugin
{

namespace cc_mqttsn
{

namespace field
{

namespace
{

struct FlagsMembers
{
    static QVariantMap createProps_topicIdType(bool serHidden)
    {
        static_cast<void>(serHidden);
        using Field = ::cc_mqttsn::field::FlagsMembers<cc_tools_qt_plugin::cc_mqttsn::options::DefaultOptions>::TopicIdType;
        auto props = cc_tools_qt_plugin::cc_mqttsn::field::createProps_topicIdType(Field::name(), serHidden);
        return props;
    }

    static QVariantMap createProps_mid(bool serHidden)
    {
        static_cast<void>(serHidden);
        using Field = ::cc_mqttsn::field::FlagsMembers<cc_tools_qt_plugin::cc_mqttsn::options::DefaultOptions>::Mid;
        return
            cc_tools_qt::property::field::ForField<Field>()
                .name(Field::name())
                .serialisedHidden(serHidden)
                .add(0U, "CleanSession")
                .add(1U, "Will")
                .add(2U, "Retain")
                .asMap();
    }

    static QVariantMap createProps_qos(bool serHidden)
    {
        static_cast<void>(serHidden);
        using Field = ::cc_mqttsn::field::FlagsMembers<cc_tools_qt_plugin::cc_mqttsn::options::DefaultOptions>::Qos;
        auto props = cc_tools_qt_plugin::cc_mqttsn::field::createProps_qos(Field::name(), serHidden);
        return props;
    }

    static QVariantMap createProps_high(bool serHidden)
    {
        static_cast<void>(serHidden);
        using Field = ::cc_mqttsn::field::FlagsMembers<cc_tools_qt_plugin::cc_mqttsn::options::DefaultOptions>::High;
        return
            cc_tools_qt::property::field::ForField<Field>()
                .name(Field::name())
                .serialisedHidden(serHidden)
                .add(0U, "Dup")
                .asMap();
    }
}; // struct FlagsMembers

} // namespace

QVariantMap createProps_flags(const char* name, bool serHidden)
{
    static_cast<void>(serHidden);
    using Field = ::cc_mqttsn::field::Flags<cc_tools_qt_plugin::cc_mqttsn::options::DefaultOptions>;
    return
        cc_tools_qt::property::field::ForField<Field>()
            .name(name)
            .serialisedHidden(serHidden)
            .add(FlagsMembers::createProps_topicIdType(true))
            .add(FlagsMembers::createProps_mid(true))
            .add(FlagsMembers::createProps_qos(true))
            .add(FlagsMembers::createProps_high(true))
            .asMap();
}

} // namespace field

} // namespace cc_mqttsn

} // namespace cc_tools_qt_plugin
